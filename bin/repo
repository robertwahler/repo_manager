#!/usr/bin/env ruby

$:.unshift(File.dirname(__FILE__) + '/../lib')

require 'rubygems'
require 'repoman'
require 'optparse'
require 'term/ansicolor'

available_actions = Repoman::AVAILABLE_ACTIONS

banner = <<BANNER
repo: CLI for batch management of multiple Git repositories

  Usage: repo [options] action [filters|action pass-through options] [options]
BANNER
banner << "\nActions: #{available_actions.join(' ')}\n" unless available_actions.empty?

help = banner
help += <<HELP

Use 'repo help' for help on actions.

  repo help init
  repo help git

Examples:

  repo list my_repo1 my_repo2
  repo list --filter=my_repo1,my_repo2

  repo list --filter=my.*
  repo list my.*

  repo --verbose --no-color config --list --filter=my_repo1,my_repo2
  repo --verbose --no-color config core.autocrlf true filter=my.*
  repo --verbose --no-color git config --list
  repo --verbose --no-color config --list

General options:
(use 'repo help action' for action options)

HELP

# get options from the command line, these options override both config files
# and defaults
options = {}
optparser = OptionParser.new do |opts|
  opts.banner = help

  opts.on("--repos f1,f2,f3", "--filter f1,f2,f3", Array, "List of Regex repository name filters") do |list|
    options[:filter] = list
  end

  opts.on("--match [MODE]", "Repo filter match mode.  MODE=ALL (default), FIRST, or ONE (fails if more than 1 match)") do |m|
    options[:match] = m || "ALL"
    options[:match].upcase!
    unless ["ALL", "FIRST", "ONE"].include?(options[:match])
      puts "repo, invalid match option: #{options[:match]}"
      exit 1
    end
  end

  opts.on("--config FILE", "Load configuration options from FILE") do |file|
    options[:config] = file
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end

  opts.on("-c", "--[no-]coloring [MODE]", "ANSI color in output. MODE=AUTO (default) or ALWAYS") do |c|
    options[:coloring] = c.nil? ? "AUTO" : c
    options[:coloring].upcase! if options[:coloring]
    unless [nil, false, "AUTO", "ALWAYS"].include?(options[:coloring])
      puts "repo, invalid color option: #{options[:coloring]}"
      exit 1
    end
  end

  opts.on("--version", "Display current version") do
    puts "repo, version " + Repoman.version
    exit 0
  end

#   opts.on("-d", "--dry-run", "Run action but omit the final execute step.  Useful combined with --verbose") do |d|
#     options[:dry_run] = d
#   end

  # no argument, shows at tail.  This will print an options summary.
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit 0
  end

end

# first pass, process until the action/subcommand, errors
# will be raised for invalid options that occur before the action/subcommand
begin
  optparser.order!
rescue OptionParser::InvalidOption => e
  puts "repo #{e}"
  puts "repo --help for more information"
  exit 1
end


# second pass find all global options that may come after the action/subcommand
# and its args, no errors raised, validity will be checked by action parser
argv = []
while unknown_arg = ARGV.shift
  argv << unknown_arg
  begin
    optparser.order!
  rescue OptionParser::InvalidOption => e
    # put unknown args back on ARGV
    e.recover(ARGV)
  end
end

# options from config file, if it exists, will not overwrite command line
options = Repoman::Settings.new(FileUtils.pwd, options).options

if STDOUT.isatty || (options[:coloring] == 'ALWAYS')
  Term::ANSIColor::coloring = options[:coloring]

  if options[:coloring] && Repoman::WINDOWS
    begin
      require 'Win32/Console/ANSI'
    rescue LoadError
      Term::ANSIColor::coloring = false
      STDERR.puts 'WARNING: You must "gem install win32console" (1.2.0 or higher) to get color output on MRI/Windows'
    end
  end

else
  Term::ANSIColor::coloring = false
end

app = Repoman::App.new(FileUtils.pwd, argv, options)
app.execute
