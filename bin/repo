#!/usr/bin/env ruby

require 'repoman'
require 'optparse'
require 'term/ansicolor'
require 'fileutils'

available_actions = Repoman::AVAILABLE_ACTIONS

banner = <<BANNER
repo: CLI for batch management of multiple Git repositories

  Usage: repo [options] action [filters|action pass-through options] [options]
BANNER
banner << "\nActions: #{available_actions.join(' ')}\n" unless available_actions.empty?

help = banner
help += <<HELP

Use 'repo help' for help on actions.

  repo help init
  repo help git

Examples:

  repo list my_repo1 my_repo2
  repo list --filter=my_repo1,my_repo2

  repo list --filter=my.*
  repo list my.*

  repo --verbose --no-color config --list --filter=my_repo1,my_repo2
  repo --verbose --no-color config core.autocrlf true filter=my.*
  repo --verbose --no-color git config --list
  repo --verbose --no-color config --list

General options:
(use 'repo help action' for action options)

HELP

# get options from the command line, these options override both config files
# and defaults
options = {}
optparser = OptionParser.new do |opts|
  opts.banner = help

  opts.on("-T", "--tasks", "List tasks") do |t|
    options[:tasks] = t
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end

  opts.on("-c", "--[no-]coloring [MODE]", "--[no-]color [MODE]", "ANSI color in output. MODE=AUTO (default) or ALWAYS") do |c|
    options[:color] = c.nil? ? "AUTO" : c
    options[:color].upcase! if options[:color]
    unless [nil, false, "AUTO", "ALWAYS"].include?(options[:color])
      puts "repo, invalid color option: #{options[:color]}"
      exit 1
    end
  end

  opts.on("--[no-]config FILE", "Load configuration options from FILE") do |file|
    options[:config] = file
  end

  opts.on("--version", "Display current version and exit") do
    puts "repo, version " + Repoman.version
    exit 0
  end

  # no argument, shows at tail.  This will print an options summary.
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit 0
  end

end

# first pass, process until the action/subcommand, errors will be raised for
# invalid options that occur before the action/subcommand
begin
  optparser.order!
rescue OptionParser::InvalidOption => e
  puts "repo #{e}"
  puts "repo --help for more information"
  exit 1
end


# OptionParser is too helpful and matches short options with long.  Before the
# second pass, replace short git options with long because we can't tell
# OptionParser to stop matching short options to long.
ARGV.each_with_index do |arg, index|
  # check and replace each short git option
  # that could be parsed by main parser
  case arg
    when '-m'
      ARGV[index] = '--message'
  end
end

# second pass find all global options that may come after the action/subcommand
# and its args, no errors raised, validity will be checked by action parser
argv = []
while unknown_arg = ARGV.shift
  argv << unknown_arg
  begin
    optparser.order!
  rescue OptionParser::InvalidOption => e
    # put unknown args back on ARGV
    e.recover(ARGV)
  end
end

# settings from config file, if it exists, will not overwrite command line options
settings = Repoman::Settings.new(FileUtils.pwd, options)
color = settings.options[:color]

# add summary of general options for use by action help commands
configuration = settings.to_hash

if STDOUT.isatty || (color == 'ALWAYS')
  Term::ANSIColor::coloring = color

  if color && Repoman::WINDOWS
    unless ENV['ANSICON']
      begin
        require 'Win32/Console/ANSI'
      rescue LoadError
        Term::ANSIColor::coloring = false
        STDERR.puts 'WARNING: You must "gem install win32console" (1.2.0 or higher) or use the ANSICON driver (https://github.com/adoxa/ansicon) to get color output on MRI/Windows'
      end
    end
  end

else
  Term::ANSIColor::coloring = false
end

app = Repoman::App.new(argv, configuration)
app.option_parser = optparser
app.execute
